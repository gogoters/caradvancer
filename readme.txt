Представляемый caradvancer представляет собой sharing-проект по прокату автомобилей.
Проект выполнен на фреймворке Flask.
Архитектура проекта включает в себя основную директорию (app.py), а также три вспомогательных - admin и user (реализованы через flask Blueprint) и databases.

Реализованы:
1. Базы данных для работы с автомобильным прокатом: автомобили разделены на компании.
Компании предоставляют модели тех или иных авто.
К моделям тех или иных авто добавляются фактически имеющиеся автомобили для их дальнейшего проката.
2. Приветственная страница для гостя: гость видит список доступных к заказу автомобилей и может просматривать информацию о каждом.
3. Админ-панель для просмотра, добавления, редактирования и удаления всех записей на сайте.
4. Юзер-панель с созданием аккаунта для резервирования автомобиля, расчета количества часов с примитивным калькулятором, системой оплаты заказов, историей заказов.

Модули, которые были использованы в работе:
1. sqlite3 и sqlalchemy - для работы с базами данных.
2. flask alembic - для работы с обновлением баз данных (добавление столбцов, образование связей, задание значений по умолчанию).
3. flask flash - для работы со всплывающими уведомлениями.
4. flask Blueprint - для работы с админ- и юзер-панелями, чтобы в дальнейшем иметь возможность копировать их функционал в другие проекты.
5. werkzeug - для шифрования паролей пользователей для дальнейшего хранения.

API, которые были использованы в работе:
1. telegram_api - для возможности присылать платежные счета в телеграм-бот (функционал приостановлен намеренно).
2. yookassa_api - для возможности заказы оплачивать (оплата происходит при закрытии заказа).
3. googleapis - для фиксации всех заказов в единой google-таблице.

Для работы с frontend-кодом были использовны готовые и доработанные шаблоны bootstrap (https://getbootstrap.com/).
Кроме того, для оптимизации кода были использованы возможности шаблонизатора jinja.

К зонам роста проекта относится frontend - есть пожелания по возможности смены статуса автомобилей через работу с раскрывающимся списком.
Раскрывающийся список также актуален для редактирования автомобилей, в частности, при выборе модели или компании-родителя.
Кроме того, не везде реализованы modal-buttons для подтверждения выбора (например, удаление статьи через админ-панель).
При запуске проекта потребуется добавить валидаторы на юзер-панель - сейчас вне зависимости от прохождения оплаты заказ закрывается в базе данных.
Кроме того, в юзер-панели потребуется добавить возможность восстановить пароль от личного кабинета.

В остальном проект работает в штатном режиме.